///////////////////////
/////// before ////////
///////////////////////




https://hackernoon.com/6-reasons-why-javascripts-async-await-blows-promises-away-tutorial-c7ec10518dd9


  require('./config/config');

  const _ = require('lodash');
  const express = require('express');
  const bodyParser = require('body-parser');
  const {ObjectID} = require('mongodb');

  var {mongoose} = require('./db/mongoose');
  var {Todo} = require('./models/todo');
  var {User} = require('./models/user');
  var {authenticate} = require('./middleware/authenticate');

  var app = express();
  // port set on Heroku for prod, locally for dev, and final env = test
  const port = process.env.PORT || 3000;

  app.use(bodyParser.json());

  // w the 'authenticate' middleware added to the route
  app.post('/todos', authenticate, (req, res) => {
  // app.post('/todos', (req, res) => {
  	var todo = new Todo({
  		text: req.body.text,
  		_creator: req.user._id // id of the user
  	});

  	todo.save().then((doc) => {
  		res.send(doc);
  	}, (e) => {
  		res.status(400).send(e);
  	});
  });

  // w/the 'authenticate' middleware (requiring an 'x-auth' header to fetch todos)
  app.get('/todos', authenticate, (req, res) => {
  // app.get('/todos', (req, res) => {
  	Todo.find({
  		_creator: req.user._id
  	}).then((todos) => {
  		res.send({todos});
  	}, (e) => {
  		res.status(400).send(e);
  	});

  	// Todo.find({
  	// 	// only todos that this user created
  	// 	_creator: req.user._id
  	// }).then((todos) => {
  	// 	res.send({todos});
  	// }, (e) => {
  	// 	res.status(400).send(e);
  	// });
  });

  app.get('/todos/:id', authenticate, (req, res) => {
  	var id = req.params.id;

  	if (!ObjectID.isValid(id)) {
  		return res.status(404).send();
  	}

  	// Todo.findById(id).then((todo) => {
  	Todo.findOne({
  		_id: id,
  		_creator: req.user._id
  	}).then((todo) => {
  	  if (!todo) {
  			return res.status(404).send();
  	  }

  		// res.send(todo);
  		// res.send({todo: todo});
  		res.send({todo}); // es6 syntax
  	}).catch((e) => {
  		res.status(400).send();
  	});
  });

  app.delete('/todos/:id', authenticate, (req, res) => {
  	// get the id
  	var id = req.params.id;
  	// validate the id -> not valid? return 404
  	if (!ObjectID.isValid(id)) {
  		return res.status(404).send();
  	}
  	// remove todo by id
  	// Todo.findByIdAndRemove(id).then((todo) => {
  	Todo.findOneAndRemove({
  		_id: id,
  		_creator: req.user._id
  	}).then((todo) => {
  	  // console.log(todo);
  		// success
  		if (!todo) {
  			// if no doc, send 404
  			return res.status(404).send();
  		}
  			// if doc, send doc back with 200
  			// res.send(todo);
  			// res.send({todo: todo});
  			res.send({todo}); // es6 syntax
  		// error
  	}).catch((e) => {
  		// 400 with empty body
  		res.status(400).send();
  	})
  });

  app.patch('/todos/:id', authenticate, (req, res) => {
  	var id = req.params.id;
  	var body = _.pick(req.body, ['text', 'completed']); // has subset of things user passed to us and we only want to PICK some things for the user to be able to update.

  	if (!ObjectID.isValid(id)) {
  		return res.status(404).send();
  	}

  	// checking completed value and setting completedAt (timestamp or cleared)
  	if(_.isBoolean(body.completed) && body.completed) {
  		body.completedAt = new Date().getTime(); // num ms on midnight of jan 1st since 1970 epoch-epic
  	} else {
  		// not boolean and or not true
  		body.completed = false;
  		body.completedAt = null; // remove form db = null
  	}

  	// query to update db
  	// findOneAndUpdate

  	Todo.findOneAndUpdate({_id: id, _creator: req.user._id}, {$set: body}, {new: true}).then((todo) => {
  		if (!todo) {
  			return res.status(404).send();
  		}

  		res.send({todo});
  	}).catch((e) => {
  		res.status(400).send();
  	})

  	// Todo.findByIdAndUpdate(id, {$set: body}, {new: true}).then((todo) => { // use mongoDb operators (like incrementors or $set)
  	// 	if (!todo) {
  	// 		return res.status(404).send();
  	// 	}
  	//
  	// 	// res.send({todo: todo});
  	// 	res.send({todo}); // es6 syntax
  	// 	// success
  	// }).catch((e) => {
  	// 	res.status(400).send();
  	// });
  });

  // POST to /users same for creating new todos
  app.post('/users', (req, res) => {
  	var body = _.pick(req.body, ['email', 'password']);
  	var user = new User(body);

  	user.save().then(() => {
  		return user.generateAuthToken(); // return since we're expecting a chaining promise
  	}).then((token) => {
  		res.header('x-auth', token).send(user);
  	}).catch((e) => {
  		res.status(400).send(e);
  	});
  });

  app.get('/users/me', authenticate, (req, res) => {
  	res.send(req.user);
  });


  app.post('/users/login', (req, res) => {
    var body = _.pick(req.body, ['email', 'password']);
    User.findByCredentials(body.email, body.password).then((user) => {
      return user.generateAuthToken().then((token) => {
        res.header('x-auth', token).send(user);
      });
    }).catch((e) => {
      res.status(400).send();
    });
  });

  // call to log out a user (requires auth) + remove token from tokens array
  // it is a DELETE route since we're trying to remove something
  // register it with a .delete()
  // make route private (auth required to run code) and remember in our authentication middleware we're storing the token to grab out later
  app.delete('/users/me/token', authenticate, (req, res) => {
  	req.user.removeToken(req.token).then(() => {
  		// respond to user now that token is deleted
  		// 1st callback to then()
  		res.status(200).send();
  	}, () => {
  		// 2nd callback to then()
  		// if things do not go well for some reason
  		res.status(400).send();
  	})
  });

  app.listen(port, () => {
  	console.log(`Started on port ${port}`);
  });

  module.exports = {app};

















///////////////////////
/////// after /////////
///////////////////////


Async/await 101

For those who have never heard of this topic before, here’s a quick intro

  Async/await is a new way to write asynchronous code. Previous options for asynchronous code are callbacks and promises.

  Async/await is actually built on top of promises. It cannot be used with plain callbacks or node callbacks.

  Async/await is, like promises, non blocking.

  Async/await makes asynchronous code look and behave a little more like synchronous code. This is where all its power lies.


EXAMPLES
promises

const makeRequest = () =>
  getJSON()
    .then(data => {
      console.log(data)
      return "done"
    })

makeRequest()

async/await

const makeRequest = async () => {
  console.log(await getJSON())
  return "done"
}

makeRequest()




1. Concise and clean

Look at how much code we didn’t write! Even in the contrived example above, it’s clear we saved a decent amount of code. We didn’t have to write .then, create an anonymous function to handle the response, or give a name data to a variable that we don’t need to use. We also avoided nesting our code. These small advantages add up quickly, which will become more obvious in the following code examples.



2. Error handling

Async/await makes it finally possible to handle both synchronous and asynchronous errors with the same construct, good old try/catch. In the example below with promises, the try/catch will not handle if JSON.parse fails because it’s happening inside a promise. We need to call .catch on the promise and duplicate our error handling code, which will (hopefully) be more sophisticated than console.log in your production ready code.

  const makeRequest = () => {
    try {
      getJSON()
        .then(result => {
          // this parse may fail
          const data = JSON.parse(result)
          console.log(data)
        })
        // uncomment this block to handle asynchronous errors
        // .catch((err) => {
        //   console.log(err)
        // })
    } catch (err) {
      console.log(err)
    }
  }

Now look at the same code with async/await. The catch block now will handle parsing errors.

  const makeRequest = async () => {
    try {
      // this parse may fail
      const data = JSON.parse(await getJSON())
      console.log(data)
    } catch (err) {
      console.log(err)
    }
  }


3. Conditionals

Imagine something like the code below which fetches some data and decides whether it should return that or get more details based on some value in the data.


  const makeRequest = () => {
    return getJSON()
      .then(data => {
        if (data.needsAnotherRequest) {
          return makeAnotherRequest(data)
            .then(moreData => {
              console.log(moreData)
              return moreData
            })
        } else {
          console.log(data)
          return data
        }
      })
  }

Just looking at this gives you a headache. It’s easy to get lost in all that nesting (6 levels), braces, and return statements that are only needed to propagate the final result up to the main promise.

This example becomes way more readable when rewritten with async/await.


  const makeRequest = async () => {
    const data = await getJSON()
    if (data.needsAnotherRequest) {
      const moreData = await makeAnotherRequest(data);
      console.log(moreData)
      return moreData
    } else {
      console.log(data)
      return data
    }
  }




4. Intermediate values

You have probably found yourself in a situation where you call a promise1 and then use what it returns to call promise2, then use the results of both promises to call a promise3. Your code most likely looked like this

  const makeRequest = () => {
    return promise1()
      .then(value1 => {
        // do something
        return promise2(value1)
          .then(value2 => {
            // do something
            return promise3(value1, value2)
          })
      })
  }


If promise3 didn’t require value1 it would be easy to flatten the promise nesting a bit. If you are the kind of person who couldn’t live with this, you could wrap both values 1 & 2 in a Promise.all and avoid deeper nesting, like this

  const makeRequest = () => {
    return promise1()
      .then(value1 => {
        // do something
        return Promise.all([value1, promise2(value1)])
      })
      .then(([value1, value2]) => {
        // do something
        return promise3(value1, value2)
      })
  }

This approach sacrifices semantics for the sake of readability. There is no reason for value1 & value2 to belong in an array together, except to avoid nesting promises.

This same logic becomes ridiculously simple and intuitive with async/await. It makes you wonder about all the things you could have done in the time that you spent struggling to make promises look less hideous.

  const makeRequest = async () => {
    const value1 = await promise1()
    const value2 = await promise2(value1)
    return promise3(value1, value2)
  }


5. Error stacks

Imagine a piece of code that calls multiple promises in a chain, and somewhere down the chain an error is thrown.

  const makeRequest = () => {
    return callAPromise()
      .then(() => callAPromise())
      .then(() => callAPromise())
      .then(() => callAPromise())
      .then(() => callAPromise())
      .then(() => {
        throw new Error("oops");
      })
  }

  makeRequest()
    .catch(err => {
      console.log(err);
      // output
      // Error: oops at callAPromise.then.then.then.then.then (index.js:8:13)
  })

The error stack returned from a promise chain gives no clue of where the error happened. Even worse, it’s misleading; the only function name it contains is callAPromise which is totally innocent of this error (the file and line number are still useful though).

However, the error stack from async/await points to the function that contains the error

  const makeRequest = async () => {
    await callAPromise()
    await callAPromise()
    await callAPromise()
    await callAPromise()
    await callAPromise()
    throw new Error("oops");
  }

  makeRequest()
    .catch(err => {
      console.log(err);
      // output
      // Error: oops at makeRequest (index.js:7:9)
  })




This is not a huge plus when you’re developing on your local environment and have the file open in an editor, but it’s quite useful when you’re trying to make sense of error logs coming from your production server. In such cases, knowing the error happened in makeRequest is better than knowing that the error came from a then after a then after a then …

... and more.
